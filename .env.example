<script>
document.addEventListener("DOMContentLoaded", (event) =>

  // Get DOM elements
  const runPromptButton = document.getElementById('run-prompt');
  const userPromptInput = document.getElementById('user-prompt');
  const chatsWrapper = document.getElementById('chats-wrapper');
  const typingLoader = document.querySelector('.typing-loader');
  
  // Get message templates
  const userMessageTemplate = document.querySelector('[data-element="user-message"]');
  const responseMessageTemplate = document.querySelector('[data-element="response-message"]');
  
  // Clone templates and remove originals from DOM
  const userMessageClone = userMessageTemplate.cloneNode(true);
  const responseMessageClone = responseMessageTemplate.cloneNode(true);
  userMessageTemplate.remove();
  responseMessageTemplate.remove();

  // Function to add user message to chat
  function addUserMessage(message) {
    const newUserMessage = userMessageClone.cloneNode(true);
    newUserMessage.style.display = 'flex';
    newUserMessage.querySelector('.chat_text').textContent = message;
    chatsWrapper.appendChild(newUserMessage);
    scrollToBottom();
  }

  // Function to add bot response to chat
  function addBotResponse(response) {
    const newResponseMessage = responseMessageClone.cloneNode(true);
    newResponseMessage.style.display = 'flex';
    const responseText = newResponseMessage.querySelector('.chat_text');
    
    // Add response message to DOM first
    chatsWrapper.appendChild(newResponseMessage);
    
    // Create a wrapper span for Typed.js
    const typedWrapper = document.createElement('span');
    responseText.innerText = "";
    responseText.appendChild(typedWrapper);
    
    // Initialize Typed.js for response animation
    new Typed(typedWrapper, {
      strings: [response],
      typeSpeed: 20,
      loop: false,
      showCursor: false,
      onComplete: () => {
        scrollToBottom();
      }
    });
    
    scrollToBottom();
  }

  // Function to make ChatGPT API call
  async function makeGPTAPICall(input) {
    const apiKey = "";
    const apiUrl = "https://api.openai.com/v1/chat/completions";

    try {
      const response = await fetch(apiUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          messages: [
            {
              role: "user",
              content: customInstructions + input,
            },
          ],
          temperature: 0.7,
        }),
      });

      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      throw new Error("Failed to get response from ChatGPT API");
    }
  }

  // Function to scroll to bottom of chat
  function scrollToBottom() {
    chatsWrapper.scrollTop = chatsWrapper.scrollHeight;
  }

  // Function to process user input
  async function processUserInput() {
    const inputValue = userPromptInput.value.trim();
    
    if (!inputValue) return;

    // Disable input and button while processing
    userPromptInput.disabled = true;
    runPromptButton.disabled = true;

    // Clear input
    userPromptInput.value = '';

    // Add user message
    addUserMessage(inputValue);

    // Show typing loader
    if(typingLoader) {
     typingLoader.style.display = 'block';
    }
   

    try {
      // Check for predefined responses
      const inputLower = inputValue.toLowerCase();
      let response = null;

      // Check predefined responses
      for (const [key, value] of Object.entries(predefinedResponses)) {
        if (key.toLowerCase() === inputLower) {
          response = value;
          break;
        }
      }

      // If no predefined response, make API call
      if (!response) {
        response = await makeGPTAPICall(inputValue);
      }

      if(typingLoader) {
     typingLoader.style.display = 'none';
    }

      // Add bot response
      addBotResponse(response);

    } catch (error) {
      console.error('Error:', error);
      typingLoader.style.display = 'none';
      addBotResponse("I apologize, but I'm having trouble processing your request right now. Please try again later.");
    } finally {
      // Re-enable input and button
      userPromptInput.disabled = false;
      runPromptButton.disabled = false;
      userPromptInput.focus();
    }
  }

  // Handle click event on run prompt button
  runPromptButton.addEventListener('click', processUserInput);

  // Handle Enter key press in input field
  userPromptInput.addEventListener('keypress', (event) => {
    if (event.key === 'Enter') {
      event.preventDefault();
      processUserInput();
    }
  });
});

</script>
